import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, OnInit } from '@angular/core';import { MatSnackBar } from '@angular/material/snack-bar';import { FormBuilder, FormGroup, Validators } from '@angular/forms';import { WeatherInterface } from '../types/weather.interface';import { WEATHER_TOKEN } from '../services/weatherToken';import { LocalStorageInterface } from '../types/localStorage.interface';import { WeatherWidgetService } from '../services/weather-widget.service';@Component({  selector: 'app-widget',  templateUrl: './weather-widget.component.html',  styleUrls: ['./weather-widget.component.css'],  changeDetection: ChangeDetectionStrategy.OnPush})export class WeatherWidgetComponent implements OnInit {  public textContent!: string;  public latintude!: number;  public longitude!: number;  public weatheCytyList: WeatherInterface[] = [];  public form!: FormGroup;  public style: boolean = false  public isLoading: boolean = false;  public totalLenght!: number;  public page: number = 1;  constructor(    private weatherService: WeatherWidgetService,    private _snackBar: MatSnackBar,    private formBuilder: FormBuilder,    private cd: ChangeDetectorRef,    @Inject(WEATHER_TOKEN) private readonly localStorageService: LocalStorageInterface  ) {}  ngOnInit(): void {    this.setDefaultCityWeather()    this.getGeolocation()    this.initializeForm()    this.weatheCytyList = JSON.parse(this.localStorageService.getWeather('cityWeather')!)  }  public onSubmit(): void {    this.weatherService.getWeatherCity(this.form.value.cityName).subscribe(      (dataWaether) => {        this.cd.markForCheck()        const localDate: WeatherInterface[] = JSON.parse(this.localStorageService.getWeather('cityWeather')!)        const selectedCity = localDate.find((value) => value?.name === dataWaether.name)        if (localDate.length === 0 || selectedCity) {          this._snackBar.open('City aldredy exict', '', {duration: 7000});          return        } else {          this.weatheCytyList.push(dataWaether)          this.localStorageService.setWeather('cityWeather', JSON.stringify(this.weatheCytyList))          this.totalLenght = this.weatheCytyList.length        }      }    )    this.form.reset()  }  public deleteCity($event: string): void {    const weather = this.weatheCytyList.find(value => value.name === $event)    const index = this.weatheCytyList.indexOf(weather!)    this.weatheCytyList.splice(index, 1)    this.totalLenght = this.weatheCytyList.length    this.localStorageService.setWeather('cityWeather', JSON.stringify(this.weatheCytyList))  }  private initializeForm(): void {    this.form = this.formBuilder.group({      cityName: [null, [Validators.required]]    })  }  private getGeolocation(): void {    this.isLoading = true    this.style = true    if (!navigator.geolocation) {      this.textContent = 'Geolocation is not supported or allowed by your browser'    } else {      navigator.geolocation.getCurrentPosition((position) => {          this.latintude = position.coords.latitude          this.longitude = position.coords.longitude          this.weatherService.getWeatherByGeolocation(this.latintude, this.longitude).subscribe(            (dataWeather) => {              this.cd.markForCheck()              this.isLoading = false              const localDate: WeatherInterface[] = JSON.parse(this.localStorageService.getWeather('cityWeather')!)              const selectedCity = localDate.find((value) => value?.name === dataWeather.name)              if (selectedCity) {                return              }              else {                this.weatheCytyList.push(dataWeather)                this.localStorageService.setWeather('cityWeather', JSON.stringify(this.weatheCytyList))              }            }          )        },        (err) => {          this.textContent = `Unable to retieve your location. Error: ${err.code}. ${err.message}`          this._snackBar.open(this.textContent, '', {duration: 7000});          console.warn(this.textContent);        }      )    }  }  private setDefaultCityWeather(): void {    const currentState = this.localStorageService.getWeather('cityWeather')    if (currentState) {      return    }    else {      this.localStorageService.setWeather('cityWeather', JSON.stringify([]))    }  }}